---
name: "Unified Release"

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

permissions:
  contents: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build Rust packages first
  rust-release:
    name: Release Rust Packages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Verify version matches tag
        run: |
          tag_version=${GITHUB_REF#refs/tags/}
          # Remove 'v' prefix if present
          tag_version=${tag_version#v}
          cargo_version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | select(.name == "cloacina") | .version')
          if [ "$tag_version" != "$cargo_version" ]; then
            echo "Tag version ($tag_version) doesn't match Cargo.toml version ($cargo_version)"
            exit 1
          fi

      - name: Build for release
        run: cargo build --release

      - name: Publish to crates.io
        run: |
          cargo publish -p cloacina-macros
          sleep 30  # Wait for crates.io to propagate
          cargo publish -p cloacina
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Build Python wheels and sdists
  python-build:
    name: Build Python Packages
    needs: [rust-release]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        backend: [postgres, sqlite]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: release-${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin[patchelf] build twine angreal

      - name: Build backend wheel
        run: |
          angreal cloaca package --backend ${{ matrix.backend }}

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.backend }}-py${{ matrix.python-version }}-${{ matrix.os }}
          path: cloaca-backend/target/wheels/cloaca_${{ matrix.backend }}-*.whl

  # Build source distributions (only need one of each)
  python-sdists:
    name: Build Python Source Distributions
    needs: [rust-release]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build maturin angreal

      # Build dispatcher sdist
      - name: Build dispatcher sdist
        run: |
          angreal cloaca generate --backend postgres  # Generate files
          cd cloaca
          python -m build --sdist

      # Build backend sdists (each in separate directory)
      - name: Build postgres backend sdist
        run: |
          angreal cloaca generate --backend postgres
          cd cloaca-backend
          python -m build --sdist
          mkdir -p ../dist-postgres
          mv dist/cloaca_postgres-*.tar.gz ../dist-postgres/

      - name: Build sqlite backend sdist
        run: |
          angreal cloaca scrub  # Clean up previous backend files
          angreal cloaca generate --backend sqlite
          cd cloaca-backend
          python -m build --sdist
          mkdir -p ../dist-sqlite
          mv dist/cloaca_sqlite-*.tar.gz ../dist-sqlite/

      - name: Upload sdist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-sdists
          path: |
            cloaca/dist/*.tar.gz
            dist-postgres/*.tar.gz
            dist-sqlite/*.tar.gz

  # Publish to PyPI
  python-publish:
    name: Publish to PyPI
    needs: [python-build, python-sdists]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/project/cloaca/

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Organize artifacts for PyPI
        run: |
          mkdir -p pypi-dist

          # Move dispatcher sdist
          find dist -name "cloaca-*.tar.gz" -exec mv {} pypi-dist/ \;

          # Move backend sdists
          find dist -name "cloaca_postgres-*.tar.gz" -exec mv {} pypi-dist/ \;
          find dist -name "cloaca_sqlite-*.tar.gz" -exec mv {} pypi-dist/ \;

          # Move all wheels
          find dist -name "*.whl" -exec mv {} pypi-dist/ \;

          echo "Files to upload:"
          ls -la pypi-dist/

      - name: Verify package metadata
        run: |
          python -m pip install --upgrade pip twine
          twine check pypi-dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: pypi-dist/
          verbose: true
          password: ${{ secrets.PYPI_TOKEN }}
