---
name: "Release"

on:
  release:
    types: [published]
  push:
    branches:
      - build**
      - cicd-*
      - cicd/**

# Grant necessary permissions for reusable workflows and cargo publish
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit_tests:
    uses: ./.github/workflows/unit_tests.yml

  integration_tests:
    uses: ./.github/workflows/integration_tests.yml

  macro_tests:
    uses: ./.github/workflows/macro_tests.yml

  tutorials:
    uses: ./.github/workflows/tutorials.yml

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests, macro_tests, tutorials]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build for release
        run: cargo build --release

  release-cargo:
    name: Release to Cargo
    runs-on: ubuntu-latest
    needs: [build-check]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # Verify the version matches the tag
      - name: Verify version
        run: |
          tag_version=${GITHUB_REF#refs/tags/v}
          cargo_version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
          if [ "$tag_version" != "$cargo_version" ]; then
            echo "Tag version ($tag_version) doesn't match Cargo.toml version ($cargo_version)"
            exit 1
          fi

      # Publish to crates.io
      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
