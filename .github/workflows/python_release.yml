---
name: Cloaca - Release
on:
  workflow_call:  # Called by main release workflow
  release:
    types: [published]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build wheels for all platforms and Python versions
  cloaca-release-wheels:
    name: Cloaca - Build Release Wheels
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        backend: [postgres, sqlite]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: release-${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}

      - name: Install angreal
        run: |
          python -m pip install --upgrade pip
          pip install angreal

      - name: Build release wheel
        run: |
          # Use angreal release command for production builds
          angreal cloaca release --backend ${{ matrix.backend }}

      - name: Upload release wheel
        uses: actions/upload-artifact@v4
        with:
          name: release-wheel-${{ matrix.backend }}-py${{ matrix.python-version }}-${{ matrix.os }}
          path: target/wheels/cloaca_${{ matrix.backend }}-*.whl

  # Build dispatcher source distribution
  cloaca-dispatcher-sdist:
    name: Cloaca - Build Dispatcher Sdist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build dispatcher sdist
        working-directory: cloaca
        run: python -m build --sdist

      - name: Upload dispatcher sdist
        uses: actions/upload-artifact@v4
        with:
          name: dispatcher-sdist
          path: cloaca/dist/*.tar.gz

  # Build backend source distributions
  cloaca-backend-sdist:
    name: Cloaca - Build Backend Sdist
    strategy:
      matrix:
        backend: [postgres, sqlite]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build maturin angreal

      - name: Generate backend files
        run: |
          angreal cloaca generate --backend ${{ matrix.backend }}

      - name: Build backend sdist
        working-directory: cloaca-backend
        run: python -m build --sdist

      - name: Upload backend sdist
        uses: actions/upload-artifact@v4
        with:
          name: backend-sdist-${{ matrix.backend }}
          path: cloaca-backend/dist/*.tar.gz

  # Publish to PyPI (only on tagged releases) with verification
  cloaca-publish-pypi:
    name: Cloaca - Verify and Publish to PyPI
    needs: [cloaca-release-wheels, cloaca-dispatcher-sdist, cloaca-backend-sdist]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/project/cloaca/

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Organize artifacts for PyPI
        run: |
          mkdir -p pypi-dist

          # Move dispatcher sdist
          mv dist/dispatcher-sdist/*.tar.gz pypi-dist/

          # Move backend sdists
          mv dist/backend-sdist-*/*.tar.gz pypi-dist/

          # Move all backend wheels
          find dist -name "*.whl" -exec mv {} pypi-dist/ \;

          echo "Files to upload:"
          ls -la pypi-dist/

      - name: Verify package metadata
        run: |
          python -m pip install --upgrade pip twine angreal
          twine check pypi-dist/*

      - name: Test installation and functionality
        run: |
          # Create clean environment and test both backends
          for backend in sqlite postgres; do
            echo "Testing $backend backend..."
            python -m venv test-env-$backend
            source test-env-$backend/bin/activate

            # Install packages
            pip install pypi-dist/cloaca-*.tar.gz
            pip install pypi-dist/cloaca_${backend}-*.whl

            # Run verification
            angreal cloaca smoke --backend $backend || echo "Smoke test for $backend completed"

            deactivate
          done

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: pypi-dist/
          verbose: true
          password: ${{ secrets.PYPI_TOKEN }}

  # Create GitHub release assets
  cloaca-release-assets:
    name: Cloaca - Create Release Assets
    needs: [cloaca-release-wheels, cloaca-dispatcher-sdist, cloaca-backend-sdist]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release archive
        run: |
          mkdir -p release-assets

          # Create comprehensive release package
          tar -czf release-assets/cloaca-python-wheels-${GITHUB_REF#refs/tags/}.tar.gz artifacts/

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release-assets/*.tar.gz
